clc;clear;close all;
source = input('your source value: ','s');
x=input('node x: ');
y=input('node y: ');
file=fopen('input0.txt');
n=length(readlines("input0.txt"));
Elemans = Eleman.empty(n:0);
for i=1:n
    line = fgetl(file);
    Elemans(i)= readEleman(line,source);
end
fclose(file);
num=numberOfNodes(Elemans)
g=ground(Elemans,num)
Elemans=solveC(Elemans,n);
out=fopen('output0.txt','wt');
Finalize(out,Elemans,source,x,y);
fclose(out);




function el = readEleman(inputLine,source)
syms s real
input = split(convertCharsToStrings(inputLine),",");
if(input(1)=="ML")
    el = Eleman(convertStringsToChars(input(1)), ...
        convertStringsToChars(input(2)), ...
        str2double(input(3)), ...
        str2double(input(4)), ...
        str2double(input(5))*s, ...
        convertStringsToChars(input(6)), ...
        str2double(input(7)), ...
        str2double(input(8)), ...
        str2double(input(9))*s, ...
        str2double(input(10))*s);
elseif ((input(1)=='Z')||(input(1)=='H')||(input(1)=='Y')||(input(1)=='T'))
    el = Eleman(convertStringsToChars(input(1)), ...
        convertStringsToChars(input(2)), ...
        str2double(input(3)), ...
        str2double(input(4)), ...
        str2double(input(5)), ...
        str2double(input(6)), ...
        str2double(input(7)),0,0,0);
else
    if((input(1)=="L")||(input(1)=="C"))
        val=str2double(input(5))*s;
    elseif((input(1)=="V")||(input(1)=="I"))
        if(input(5)=='-')
           input(5)=source; 
        end
        val=laplace(str2sym(input(5)));
        
    else
        val=str2double(input(5));
    end
    el = Eleman(convertStringsToChars(input(1)), ...
        convertStringsToChars(input(2)), ...
        str2double(input(3)), ...
        str2double(input(4)),val,0,0,0,0,0);
end
end


%% analysis
function [Elemans] = solveC(Elemans,num)
    Y = zeros(num);
    Is = zeros(1,num);
    Y=sym(Y);
    Is=sym(Is);
    for el = Elemans
        if el.type=='R'
            Y(el.node1,el.node1) = Y(el.node1+1,el.node1)+1./el.value;
            Y(el.node2,el.node2) = Y(el.node2+1,el.node2)+1./el.value;
            Y(el.node1,el.node2) = -1./el.value;
            Y(el.node2,el.node1) = -1./el.value;
        elseif el.type=='C'
            Y(el.node1,el.node1) = Y(el.node1,el.node1)+el.value;
            Y(el.node2,el.node2) = Y(el.node2,el.node2)+el.value;
            Y(el.node1,el.node2) = -el.value;
            Y(el.node2,el.node1) = -el.value;
        elseif el.type=='L'
            Y(el.node1,el.node1) = Y(el.node1,el.node1)+1./el.value;
            Y(el.node2,el.node2) = Y(el.node2,el.node2)+1./el.value;
            Y(el.node1,el.node2) = -1./el.value;
            Y(el.node2,el.node1) = -1./el.value;
        elseif el.type=="ML"
            Y = addRowColumn(Y);
            Y = addRowColumn(Y);
            Is = addColumn(Is);
            Is = addColumn(Is);
            Y(end-1,el.node1_1+1) = 1;
            Y(end-1,el.node2_1+1) = -1;
            Y(end-1,end-1) = -el.value1;
            Y(end-1,end) = -el.mutual_inductance;
            Y(end,el.node1_2+1) = 1;
            Y(end,el.node2_2+1) = -1;
            Y(end,end-1) = -el.mutual_inductance;
            Y(end,end) = -el.value2;
            Y(el.node1_1+1,end-1) = 1;
            Y(el.node2_1+1,end-1) = -1;
            Y(el.node1_2+1,end) = 1;
            Y(el.node2_2+1,end) = -1;
        elseif el.type=='H'
            Y(el.node1+1,el.dependent_node1+1) = Y(el.node1+1,el.dependent_node1+1)+el.value;
            Y(el.node1+1,el.dependent_node2+1) = Y(el.node1+1,el.dependent_node2+1)-el.value;
            Y(el.node2+1,el.dependent_node1+1) = Y(el.node2+1,el.dependent_node1+1)-el.value;
            Y(el.node2+1,el.dependent_node2+1) = Y(el.node2+1,el.dependent_node2+1)+el.value;
        elseif el.type=='Z'
            Y = addRowColumn(Y);
            Is = addColumn(Is);
            Y(end,el.dependent_node1+1) = -el.value;
            Y(end,el.dependent_node2+1) = el.value;
            Y(end,el.node1+1) = 1;
            Y(end,el.node2+1) = -1;
            Y(el.node1+1,end) = 1;
            Y(el.node2+1,end) = -1;
        elseif el.type=='T'
            Y = addRowColumn(Y);
            Is = addColumn(Is);
            Y(end,el.dependent_node1+1) = 1;
            Y(end,el.dependent_node2+1) = -1;
            Y(el.dependent_node1+1,end) = 1;
            Y(el.dependent_node2+1,end) = -1;
            Y(el.node1+1,end) = el.value;
            Y(el.node2+1,end) = -el.value;
        elseif el.type=='Y'
            Y = addRowColumn(Y);
            Y = addRowColumn(Y);
            Is = addColumn(Is);
            Is = addColumn(Is);
            Y(el.dependent_node1+1,end-1) = 1;
            Y(el.dependent_node2+1,end-1) = -1;
            Y(el.node1+1,end) = 1;
            Y(el.node1+1,end) = -1;
            Y(end,end) = -el.value;
            Y(end-1,el.dependent_node1+1) = 1;
            Y(end-1,el.dependent_node2+1) = -1;
            Y(end,el.node1+1) = 1;
            Y(end,el.node2+1) = -1;
        elseif el.type=='V'
            Is(el.node1) = el.value;
            Is(el.node2) = -el.value;
        elseif el.type=='I'
            Is(el.node1+1)=Is(el.node1+1)-el.value;
            Is(el.node2+1)=Is(el.node2+1)+el.value;
        end
      
    end
    G=Y
    Is
    G(1,:)=[];
    G(:,1)=[]
    is=Is(2:end)
    det(G)
    X=inv(G)*is';
    X2=[0 X']
    n=num+2;
    for i=1:length(Elemans)
        if Elemans(i).type == 'V'
            Elemans(i).voltage = Elemans(i).value;
            Elemans(i).current = X2(n);
            n = n + 1;
       elseif Elemans(i).type == 'I'
           Elemans(i).current = Elemans(i).value;
           Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
       elseif Elemans(i).type == 'R'
           Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
           Elemans(i).current = Elemans(i).voltage./Elemans(i).value;
        elseif Elemans(i).type == 'C'
           Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
           Elemans(i).current = Elemans(i).voltage.*Elemans(i).value;
        elseif Elemans(i).type == 'L'
           Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
           Elemans(i).current = X2(n);
           n = n + 1;
        elseif Elemans(i).type == "ML"
            Elemans(i).voltage1 = X2(Elemans(i).node1_1+1)-X2(Elemans(i).node2_1+1);
            Elemans(i).current1 = X2(n);
            n = n + 1;
            Elemans(i).voltage2 = X2(Elemans(i).node1_2+1)-X2(Elemans(i).node2_2+1);
            Elemans(i).current2 = X2(n);
            n = n + 1;
        elseif Elemans(i).type == 'H'
            Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
            Elemans(i).current = Elemans(i).voltage.*Elemans(i).value;
        elseif Elemans(i).type == 'Z'
            Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
            Elemans(i).current = X2(n);
            n = n + 1;
        elseif Elemans(i).type == 'T'
            Elemans(i).voltage = X2(Elemans(i).node1+1)-X2(Elemans(i).node2+1);
            Elemans(i).current = X2(n).*Elemans(i).value;
            n = n + 1;
        elseif Elemans(i).type == 'Y'
            Elemans(i).voltage = X2(n).*Elemans(i).value;
            n = n + 1;
            Elemans(i).current = X2(n);
            n = n + 1;
       end
    end

end
function n = ground(Elemans,num)
nodes=zeros(1,num);
 for el = Elemans
       if el.type == "ML"
          nodes(el.node1_1)=nodes(el.node1_1)+1;
          nodes(el.node2_1)=nodes(el.node2_1)+1;
          nodes(el.node1_2)=nodes(el.node1_2)+1;
          nodes(el.node2_2)=nodes(el.node2_2)+1;
       else
          nodes(el.node1)=nodes(el.node1)+1;
          nodes(el.node2)=nodes(el.node2)+1;
       end
 end
 ma=max(nodes);
 for nod=nodes
     if(nod==ma)
         n=nod;
     end
 end
end
function n = numberOfNodes(Elemans)
n=0;
for Eleman = Elemans
    if Eleman.type == "ML"
        if(Eleman.node1_1>n)
            n = Eleman.node1_1;
        end
        if(Eleman.node2_1>n)
            n = Eleman.node2_1;
        end
        if(Eleman.node1_2>n)
            n = Eleman.node1_2;
        end
        if(Eleman.node2_2>n)
            n = Eleman.node2_2;
        end
    else
        if(Eleman.node1>n)
            n = Eleman.node1;
        end
        if(Eleman.node2>n)
            n = Eleman.node2;
        end
        if ((Eleman.type=='Z')||(Eleman.type=='H')||(Eleman.type=='Y')||(Eleman.type=='T'))
            if(Eleman.dependent_node1>n)
                n = Eleman.dependent_node1;
            end
            if(Eleman.dependent_node2>n)
                n = Eleman.dependent_node2;
            end
        end
    end
    
end
end
function A2 = addRowColumn(A)
    A2 = zeros(size(A,1)+1, size(A,2)+1);
    A2=sym(A2);
    A2(1:size(A,1), 1:size(A,2)) = A;
end
function A2 = addColumn(A)
    A2 = zeros(1, size(A,2)+1);
    A2=sym(A2);
    A2(1, 1:size(A,2)) = A;
end
function Finalize(out,Els,source,x,y)
    sourceS=laplace(str2sym(source));
    b=0;
    for E = Els
        if E.type == "ML"
            fprintf(out,convertCharsToStrings(E.name1)+","+string(ilaplace(E.voltage1))+","+string(ilaplace(E.current1))+"\n");
            fprintf(out,convertCharsToStrings(E.name2)+","+string(ilaplace(E.voltage2))+","+string(ilaplace(E.current2))+"\n");
            disp(3);
             if(((E.node1_1==x&&E.node2_1==y)||(E.node1_1==y&&E.node2_1==x))&&b==0)
                b=1;
           Ts= simplify(sourceS.\E.voltage1)
           Tt=ilaplace(Ts);
           Vout=E.voltage1
           Voutt=simplify(ilaplace(Vout));
           fplot(Tt);
          [t,s]= title('$T(t)=\frac{Vout(t)}{Vs(s)}$','interpreter','latex');
          t.FontSize=13;
            figure
           fplot(Voutt)
           [t,s]= title('$Vout(t)$','interpreter','latex');
            t.FontSize=13;
            grid on;
             elseif(((E.node1_2==x&&E.node2_2==y)||(E.node1_2==y&&E.node2_2==x))&&b==0)
                b=1;
           Ts= simplify(sourceS.\E.voltage1)
           Tt=ilaplace(Ts);
           Vout=E.voltage2
           Voutt=simplify(ilaplace(Vout));
           fplot(Tt);
          [t,s]= title('$T(t)=\frac{Vout(t)}{Vs(s)}$','interpreter','latex');
          t.FontSize=13;
            figure
           fplot(Voutt)
           [t,s]= title('$Vout(t)$','interpreter','latex');
            t.FontSize=13;
            grid on;
             end
        else
        fprintf(out,convertCharsToStrings(E.name)+","+string(ilaplace(E.voltage))+","+string(ilaplace(E.current))+"\n"); 
         if(((E.node1==x&&E.node2==y)||(E.node1==y&&E.node2==x))&&b==0)
            b=1;
           %% disp('T(s)= ')
           Ts= simplify(sourceS.\E.voltage)
           Tt=ilaplace(Ts);
           Vout=E.voltage
           Voutt=simplify(ilaplace(Vout));
           fplot(Tt);
          [t,s]= title('$T(t)=\frac{Vout(t)}{Vs(s)}$','interpreter','latex');
          t.FontSize=13;
            figure
           fplot(Voutt)
           [t,s]= title('$Vout(t)$','interpreter','latex');
            t.FontSize=13;
            grid on;
        end
        end
       
    end
end


